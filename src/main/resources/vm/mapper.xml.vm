<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="${packageName}.${className}Mapper">

    <resultMap type="top.zuoyu.mybatis.json.JsonObject" id="${tableName}ResultByZuoyu">
#foreach ($column in $columns)
#if(${column.columnName} == ${pkColumn.columnName})
        <id property="${column.javaField}" column="${column.columnName}" jdbcType="${column.jdbcType}" javaType="${column.javaType}"/>
#else
        <result property="${column.javaField}" column="${column.columnName}" jdbcType="${column.jdbcType}" javaType="${column.javaType}" />
#end
#end
    </resultMap>

    <sql id="select${className}Vo">
        select#foreach($column in $columns) $column.columnName#if($velocityCount != $columns.size()),#end#end from ${tableName}
    </sql>

    <select id="selectList" resultMap="${tableName}ResultByZuoyu">
        <include refid="select${className}Vo"/>
    </select>

    <select id="selectListByExample" parameterType="top.zuoyu.mybatis.json.JsonObject" resultMap="${tableName}ResultByZuoyu">
        <include refid="select${className}Vo"/>
        <where>
#foreach($column in $columns)
#set($javaField=$column.javaField)
#set($javaType=$column.javaType)
#set($columnName=$column.columnName)
#if($javaType == "java.lang.String")
            <if test="$javaField != null #if($javaType == 'String' ) and $javaField.trim() != ''#end"> and $columnName like concat('%', #{$javaField}, '%')</if>
#else
            <if test="$javaField != null #if($javaType == 'String' ) and $javaField.trim() != ''#end"> and $columnName = #{$javaField}</if>
#end
#end
        </where>
    </select>

    <select id="selectByPrimaryKey" parameterType="java.io.Serializable" resultMap="${tableName}ResultByZuoyu">
        <include refid="select${className}Vo"/>
        where ${pkColumn.columnName} = #{${pkColumn.javaField}, jdbcType=$pkColumn.jdbcType}
    </select>

    <select id="existsBy" parameterType="java.lang.String" resultType="java.lang.Boolean">
        select exists(select 1 from ${tableName} where appearance_code = #{appearanceCode} and del_flag = '0')
    </select>

    <insert id="insert" parameterType="top.zuoyu.mybatis.json.JsonObject"#if($pkColumn.increment) useGeneratedKeys="true" keyProperty="$pkColumn.javaField"#end>
        insert into ${tableName}
        <trim prefix="(" suffix=")" suffixOverrides=",">
#foreach($column in $columns)
#if($column.columnName != $pkColumn.columnName || !$pkColumn.increment)
            <if test="$column.javaField != null#if($column.javaType == 'java.lang.String' && $column.required) and $column.javaField != ''#end">$column.columnName,</if>
#end
#end
         </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
#foreach($column in $columns)
#if($column.columnName != $pkColumn.columnName || !$pkColumn.increment)
            <if test="$column.javaField != null#if($column.javaType == 'java.lang.String' && $column.required) and $column.javaField != ''#end">#{$column.javaField},</if>
#end
#end
         </trim>
    </insert>

    <insert id="insertBatch" parameterType="java.util.List"#if($pkColumn.increment) useGeneratedKeys="true" keyProperty="$pkColumn.javaField"#end>
        insert into ${tableName}
        <trim prefix="(" suffix=")" suffixOverrides=",">
#foreach($column in $columns)
#if($column.columnName != $pkColumn.columnName || !$pkColumn.increment)
            $column.columnName,
#end
#end
        </trim>
        values
        <foreach collection ="list" item="item" index= "index" separator =",">
            <trim prefix="(" suffix=")" suffixOverrides=",">
#foreach($column in $columns)
#if($column.columnName != $pkColumn.columnName || !$pkColumn.increment)
                #{item.${column.javaField}, jdbcType=$column.jdbcType},
#end
#end
            </trim>
        </foreach>
    </insert>

    <update id="updateByPrimaryKey" parameterType="top.zuoyu.mybatis.json.JsonObject">
        update ${tableName}
        <trim prefix="SET" suffixOverrides=",">
#foreach($column in $columns)
#if($column.columnName != $pkColumn.columnName)
            <if test="$column.javaField != null#if($column.javaType == 'java.lang.String' && $column.required) and $column.javaField != ''#end">$column.columnName = #{$column.javaField, jdbcType=$column.jdbcType},</if>
#end
#end
        </trim>
        where ${pkColumn.columnName} = #{${pkColumn.javaField}, jdbcType=$pkColumn.jdbcType}
    </update>

    <update id="updateByPrimaryKeyBatch" parameterType="java.util.List">
        update ${tableName}
        <trim prefix="SET" suffixOverrides=",">
#foreach($column in $columns)
#if($column.columnName != $pkColumn.columnName)
            <trim prefix="$column.javaField = case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    <if test="item.${column.javaField} != null#if($column.javaType == 'java.lang.String' && $column.required) and item.${column.javaField} != ''#end">
                        when ${pkColumn.columnName} = #{item.${pkColumn.javaField}} then #{item.${column.javaField}, jdbcType=$column.jdbcType}
                    </if>
                    <if test="item.${column.javaField} == null#if($column.javaType == 'java.lang.String' && $column.required) and item.${column.javaField} == ''#end">
                        when ${pkColumn.columnName} = #{item.${pkColumn.javaField}} then ${tableName}.${column.javaField}
                    </if>
                </foreach>
            </trim>
#end
#end
        </trim>
        where ${pkColumn.columnName} in
        <foreach collection="list" index="index" item="item" separator="," open="(" close=")">
            #{item.${pkColumn.javaField}, jdbcType=$pkColumn.jdbcType}
        </foreach>
    </update>

    <delete id="deleteByPrimaryKey" parameterType="java.io.Serializable">
        delete from ${tableName} where ${pkColumn.columnName} = #{${pkColumn.javaField}, jdbcType=$pkColumn.jdbcType}
    </delete>

    <delete id="deleteByPrimaryKeys" parameterType="java.io.Serializable">
        delete from ${tableName} where ${pkColumn.columnName} in
        <foreach item="${pkColumn.javaField}" collection="array" open="(" separator="," close=")">
            #{${pkColumn.javaField}, jdbcType=$pkColumn.jdbcType}
        </foreach>
    </delete>
</mapper>